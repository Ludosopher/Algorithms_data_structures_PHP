<?php
                                // Task 2.1
$n = 100;
$array[]= [];

for ($i = 0; $i < $n; $i++) {
    for ($j = 1; $j < $n; $j *= 2) {
       $array[$i][$j] = true;
    }
}
          // при n = 50. Итераций 1-го уровня - 50, 2-го - 6, (50 * 6) 300 итераций.
          // при n = 100. Итераций 1-го уровня - 100, 2-го - 7, (100 * 7) 700 итераций.
          // При увеличении числа n в два раза итерации 1-го уровня выросли также в два раза, значит
          // сложность итераций 1-го уровня соответствует O(n). Итерации 2-го уровня выросли менее чем в два раза (в 1,2 раза).
          // значит сложность итараций 2-го уровня соответствует O(log(n)). Таким образом, общая сложность O(n * log(n)).


                                // Task 2.1
$n2 = 100;
$array2[] = [];

for ($i = 0; $i < $n2; $i += 2) {
    for ($j = $i; $j < $n2; $j++) {
        $array2[$i][$j] = true;
    }
}
         // при n = 50. Итераций 1-го уровня - 25, 2-го - в среднем 76, 1900 итераций в целом.
         // при n = 100. Итераций 1-го уровня - 50, 2-го - в среднем 51, 2550 итераций в целом.
         // При увеличении числа n в два раза итерации 1-го уровня выросли также в два раза, значит
         // сложность итераций 1-го уровня соответствует O(n). Итерации 2-го уровня снизились (в 1,5 раз).
         // значит сложность итараций 2-го уровня соответствует O(log(n)). Таким образом, общая сложность O(n * log(n)).